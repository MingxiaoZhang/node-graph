(()=>{"use strict";var e={607:function(e,t,s){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(s(935)),d=document.getElementById("graphContainer"),o=new i.default(d),l=o.createNode(50,50),a=o.createNode(150,150),r=o.createNode(250,250,{style:{borderRadius:"0",textAlign:"center"},content:"Hello"});o.createEdge(l,a),o.createEdge(a,r),document.getElementById("addButton").addEventListener("click",(function(){const e=o.findOptimalNodePosition();o.createNode(e.x,e.y)}))},935:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e){this.container=e,this.nodes=[],this.edges=[],this.draggingNode=void 0,this.initialMouseX=0,this.initialMouseY=0,this.initialNodeX=0,this.initialNodeY=0,this.container.addEventListener("mousedown",this.handleMouseDown.bind(this)),this.container.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.container.addEventListener("mouseup",this.handleMouseUp.bind(this))}createNodeBase(e,t){const s=document.createElement("div");s.classList.add("node"),s.setAttribute("style","width: 50px; height: 50px; background-color: #ccc; border: 1px solid #000; border-radius: 50%; cursor: move;"),s.style.position="absolute",s.style.left=`${e}px`,s.style.top=`${t}px`,s.style.zIndex="2",s.id=`node${this.nodes.length+1}`,s.addEventListener("mouseenter",this.handleNodeMouseEnter.bind(this)),s.addEventListener("mouseleave",this.handleNodeMouseLeave.bind(this));const n={element:s,edges:[],id:s.id};return this.container.appendChild(s),this.nodes.push(n),n}createNode(e,t,s){const n=this.createNodeBase(e,t);if(void 0===s)return n;for(const[e,t]of Object.entries(s.style)){let s=e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`));n.element.style.setProperty(s,t)}return n.element.innerHTML=s.content,n}createEdge(e,t){const s=document.createElement("div");s.classList.add("edge"),s.id=`edge${this.edges.length+1}`;const n={element:s,startNode:e.id,endNode:t.id};e.edges.push(n),t.edges.push(n),this.container.appendChild(s),this.edges.push(n),this.updateEdges(e)}handleNodeMouseEnter(e){e.target.style.border="3px solid"}handleNodeMouseLeave(e){e.target.style.border="1px solid #000"}handleMouseDown(e){const t=e.target;if(t.closest(".node")){const s=this.nodes.find((e=>{var s;return e.id===(null===(s=t.closest(".node"))||void 0===s?void 0:s.id)}));if(!s)return;if(0===e.button)this.draggingNode=s,this.initialMouseX=e.clientX,this.initialMouseY=e.clientY,this.initialNodeX=s.element.offsetLeft,this.initialNodeY=s.element.offsetTop,s.element.style.zIndex="10";else if(2===e.button){const t=document.createElement("div");t.classList.add("edge"),this.newEdge={element:t,startNode:s},this.container.appendChild(t),this.updateNewEdge(e.clientX,e.clientY)}}}handleMouseMove(e){if(this.draggingNode){const t=e.clientX-this.initialMouseX,s=e.clientY-this.initialMouseY,n=this.initialNodeX+t,i=this.initialNodeY+s;this.draggingNode.element.style.left=`${n}px`,this.draggingNode.element.style.top=`${i}px`,this.updateEdges(this.draggingNode)}else this.newEdge&&this.updateNewEdge(e.clientX,e.clientY)}handleMouseUp(e){if(this.draggingNode&&(this.draggingNode.element.style.zIndex="2",this.draggingNode=void 0),this.newEdge){e.preventDefault();const t=e.target;if(t.closest(".node")){const e=this.nodes.find((e=>{var s;return e.id===(null===(s=t.closest(".node"))||void 0===s?void 0:s.id)}));if(!e)return;this.createEdge(this.newEdge.startNode,e)}this.container.removeChild(this.newEdge.element),this.newEdge=void 0}}updateEdges(e){for(const t of e.edges){const e=document.querySelector(`.node#${t.startNode}`),s=document.querySelector(`.node#${t.endNode}`),n=parseInt(e.style.left,10)+e.offsetWidth/2,i=parseInt(e.style.top,10)+e.offsetHeight/2,d=parseInt(s.style.left,10)+s.offsetWidth/2,o=parseInt(s.style.top,10)+s.offsetHeight/2,l=Math.sqrt((d-n)**2+(o-i)**2),a=Math.atan2(o-i,d-n);t.element.style.left=n-(1-Math.cos(a))*l/2+"px",t.element.style.top=`${i+Math.sin(a)*l/2}px`,t.element.style.width=`${l}px`,t.element.style.transform=`rotate(${a}rad)`}}updateNewEdge(e,t){if(this.newEdge){const s=parseInt(this.newEdge.startNode.element.style.left,10)+this.newEdge.startNode.element.offsetWidth/2,n=parseInt(this.newEdge.startNode.element.style.top,10)+this.newEdge.startNode.element.offsetHeight/2,i=e,d=t,o=Math.sqrt((i-s)**2+(d-n)**2),l=Math.atan2(d-n,i-s);this.newEdge.element.style.left=s-(1-Math.cos(l))*o/2+"px",this.newEdge.element.style.top=`${n+Math.sin(l)*o/2}px`,this.newEdge.element.style.width=`${o}px`,this.newEdge.element.style.transform=`rotate(${l}rad)`}}findOptimalNodePosition(){const e=parseInt(this.container.style.width,10),t=parseInt(this.container.style.height,10),s=parseInt(this.container.style.left,10),n=parseInt(this.container.style.top,10),i=this.nodes;let d=-1,o={x:0,y:0};for(let l=0;l<=e;l+=50)for(let a=0;a<=t;a+=50){const t={x:s+l,y:n+a};let r=0;i.map((e=>{const t=parseInt(e.element.style.left,10),s=parseInt(e.element.style.top,10);r+=Math.sqrt((l-t)**2+(a-s)**2)})),r+=Math.min(l,e-l),r+=Math.min(a,e-a),r>d&&(d=r,o=t)}return o}}}},t={};!function s(n){var i=t[n];if(void 0!==i)return i.exports;var d=t[n]={exports:{}};return e[n].call(d.exports,d,d.exports,s),d.exports}(607)})();